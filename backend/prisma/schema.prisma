// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")

}

model User {
  id                 String    @id @default(uuid())
  email              String    @unique
  nom                String?
  prenom             String?
  date_de_naissance  DateTime?
  genre              String?
  ville              String?
  code_postal        String?
  pays               String?
  telephone          String?
  password           String?
  role               Role      @default(FREEMIUM)
  jetons             Jeton[]   
  courses            Course[] 
  accessLogs         AccessLog[]
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  transactions      Transaction[]
}

enum Role {
  ADMIN
  FREEMIUM
  PREMIUM
  SCHOOL
}

model Jeton {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  amount    Int      
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Plan {
  id           String   @id @default(uuid())
  name         String   @unique
  description  String?
  price        Float?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Transaction {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  amount    Float
  type      TransactionType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TransactionType {
  RECHARGE
  SUBSCRIPTION
}

model Course {
  id        String    @id @default(uuid())
  title     String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  accessLogs AccessLog[] 
  summaries Summary[]
  quizzes   Quiz[]
}

model AccessLog {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  action    String   // Ex: 'Viewed', 'Completed'
  createdAt DateTime @default(now())
}

model School {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Summary {
  id        String   @id @default(uuid())
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quiz {
  id        String   @id @default(uuid())
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  questions Question[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id        String   @id @default(uuid())
  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  question  String
  answer    String
  options   String[]
}
